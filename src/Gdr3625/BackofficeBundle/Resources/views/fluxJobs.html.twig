{% extends 'base.html.twig' %}

{% block contenu  %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-offset-3 col-md-6">
                <div>
                    <h1 id="titreRubriques" class="text-center">Listes des Offres d'emploi du MuFoPAM</h1>
                </div>
                <!-- Barre de recherche -->
                <div id="custom-search-input">
                    <div class="input-group col-md-12">
                        <input id="search" type="text" class="quicksearch form-control input-lg" placeholder="Rechercher une offre d'emploi ..." />
                    <span class="input-group-btn">
                        <button class="btn btn-info btn-lg" type="button">
                            <i class="glyphicon glyphicon-search"></i>
                        </button>
                    </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid row">
            {% for flux in fluxes %}
                <div class="element-item bleu grid-sizerActu carteEquipe col-lg-12">
                    <div class="carteContent ">
                        <div class="topCarte">
                            <div class="paddingActu">
                                <div class="titreJob">
                                    <h2 class="text-center"> {{ flux.titre }}</h2>
                                </div>
                                <div>
                                    <p> {{ flux.contenu | raw }}</p>
                                </div>
                             </div>
                        </div>
                    </div>
                </div>

            {% endfor %}
        </div>
    </div>

    <script>
        // quick search regex
        var qsRegex;

        // init Isotope
        var $grid = $('.grid').isotope({
            itemSelector: '.element-item',
            layoutMode: 'fitRows',
            filter: function() {
                return qsRegex ? $(this).text().match( qsRegex ) : true;
            }
        });

        // use value of search field to filter
        var $quicksearch = $('.quicksearch').keyup( debounce( function() {
            qsRegex = new RegExp( $quicksearch.val(), 'gi' );
            $grid.isotope();
        }, 200 ) );

        // debounce so filtering doesn't happen every millisecond
        function debounce( fn, threshold ) {
            var timeout;
            return function debounced() {
                if ( timeout ) {
                    clearTimeout( timeout );
                }
                function delayed() {
                    fn();
                    timeout = null;
                }
                timeout = setTimeout( delayed, threshold || 100 );
            }
        }

    </script>


  {#  <div class="container-fluid">
        <div class="row">
            <div class="col-lg-offset-1 col-lg-10">
                <h1 class="title1 bot-left">Les jobs de MuFoPAM</h1>
            </div>
            <div class="col-lg-2 filtersDisplay">
                <div class="filterCol" data-spy="" data-offset-top="">

                </div>
            </div>
            <div class="col-lg-10 equipesDisplay">
                <div class="row">
                    {% for flux in fluxes %}
                        <div class="col-lg-6">
                            <div class="panel-assembly">
                                <div class="panel {{ random(['panel-primary','panel-success','panel-warning','panel-default','panel-info','panel-danger']) }}">
                                    <div class="panel-heading divTitre">
                                        <div class="panel-title">
                                            <h4>{{ flux.titre | truncate(65,true,' (...) ')}}<span class="pull-right auteurDate">{{ flux.datePublication | date('d-m-Y')}}</span></h4>
                                        </div>
                                    </div>
                                    <div class="panel-body">
                                        <p class="pContenu">{{ flux.contenu | truncate(200,true, ' (...) ') }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div> #}
{% endblock %}