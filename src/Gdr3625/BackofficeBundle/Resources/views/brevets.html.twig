{% extends 'base.html.twig' %}

{% block contenu  %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-offset-4 col-lg-4 text-center">
                <h1>Brevet</h1>
                <p><input type="text" class="quicksearch" placeholder="Rechercher ici ..." /></p>
            </div>
        </div>
        <div class="grid row">
            {% for key, brevet in brevets %}
                    <div class="element-item bleu grid-sizerBrevet carteEquipecol-lg-12">
                        <div class="carteContent ">
                            <div class="topCarte">
                                <div class="titreBrevet">
                                    <h2 class="text-center"> {{ 'Brevet NÂ°' ~ brevet.id }} </h2>
                                </div>
                                <div class="paddingActu">
                                    <div>
                                        <p> {{ brevet.brevet }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

            {% endfor %}
        </div>
    </div>

    <script>
        // quick search regex
        var qsRegex;

        // init Isotope
        var $grid = $('.grid').isotope({
            itemSelector: '.element-item',
            layoutMode: 'fitRows',
            filter: function() {
                return qsRegex ? $(this).text().match( qsRegex ) : true;
            }
        });

        // use value of search field to filter
        var $quicksearch = $('.quicksearch').keyup( debounce( function() {
            qsRegex = new RegExp( $quicksearch.val(), 'gi' );
            $grid.isotope();
        }, 200 ) );

        // debounce so filtering doesn't happen every millisecond
        function debounce( fn, threshold ) {
            var timeout;
            return function debounced() {
                if ( timeout ) {
                    clearTimeout( timeout );
                }
                function delayed() {
                    fn();
                    timeout = null;
                }
                timeout = setTimeout( delayed, threshold || 100 );
            }
        }

    </script>
{% endblock %}
